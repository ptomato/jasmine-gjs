#!/usr/bin/env gjs

const Gio = imports.gi.Gio;
const GLib = imports.gi.GLib;
const System = imports.system;

let runnerPath = '@pkglibexecdir@/jasmine-runner';
if (GLib.getenv('JASMINE_UNINSTALLED')) {
    // Trick to use the uninstalled copy of Jasmine when running "make check".
    const srcdir = GLib.getenv('SRCDIR');
    imports.searchPath.unshift(GLib.build_filenamev([srcdir, 'src']));
    const builddir = GLib.getenv('BUILDDIR');
    runnerPath = GLib.build_filenamev([builddir, 'jasmine-runner']);
} else {
    imports.searchPath.unshift('@datadir@/jasmine-gjs');
}

const Config = imports.config;
const Options = imports.options;

const [files, options] = Options.parseOptions(ARGV);

if (options.version) {
    print('Jasmine @PACKAGE_VERSION@');
    System.exit(0);
}

const config = Config.loadConfig(options);

// Launch Jasmine in a subprocess so we can control the environment
const launcher = new Gio.SubprocessLauncher();
Config.prepareLauncher(launcher, config);
const args = Config.configToArgs(config, files, options);
args.unshift(runnerPath);  // argv[0]
const process = launcher.spawnv(args);
process.wait(null);

// Don't put any code after this; the return value is used as the exit code.
(function () {
    if (process.get_if_exited())
        return process.get_exit_status();
    return 1;
})();
